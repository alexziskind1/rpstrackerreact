[{"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/index.tsx":"1","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/serviceWorker.ts":"2","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/App.tsx":"3","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/side-menu/side-menu.tsx":"4","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/main-menu/main-menu.tsx":"5","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/pages/backlog/backlog-page.tsx":"6","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/pages/dashboard/dashboard-page.tsx":"7","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/pages/detail/detail-page.tsx":"8","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/repositories/backlog.repository.ts":"9","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/services/backlog.service.ts":"10","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/helpers/priority-styling.ts":"11","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/services/dashboard.service.ts":"12","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/repositories/dashboard.repository.ts":"13","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/date-utils.ts":"14","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/state/app-store.ts":"15","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/services/pt-user-service.ts":"16","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/preset-filter/preset-filter.tsx":"17","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-tasks/pt-item-tasks.tsx":"18","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-details/pt-item-details.tsx":"19","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-chitchat/pt-item-chitchat.tsx":"20","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/components/active-issues/active-issues.tsx":"21","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/index.ts":"22","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/config.ts":"23","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/user-avatar-helper.ts":"24","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/index.ts":"25","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/state/app-state.ts":"26","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/models/forms/pt-item-details-edit-form.ts":"27","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/string-helpers.ts":"28","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-types.ts":"29","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-statuses.ts":"30","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-priorities.ts":"31","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/index.ts":"32","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-status.enum.ts":"33","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-type-enum.ts":"34","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-priority.enum.ts":"35"},{"size":494,"mtime":1666189822196,"results":"36","hashOfConfig":"37"},{"size":5198,"mtime":1666189822198,"results":"38","hashOfConfig":"37"},{"size":1757,"mtime":1666190815416,"results":"39","hashOfConfig":"37"},{"size":9503,"mtime":1666189822199,"results":"40","hashOfConfig":"37"},{"size":774,"mtime":1666189822199,"results":"41","hashOfConfig":"37"},{"size":9261,"mtime":1666189822197,"results":"42","hashOfConfig":"37"},{"size":4214,"mtime":1666189822198,"results":"43","hashOfConfig":"37"},{"size":7365,"mtime":1666189822197,"results":"44","hashOfConfig":"37"},{"size":4850,"mtime":1666189822197,"results":"45","hashOfConfig":"37"},{"size":7291,"mtime":1666189822197,"results":"46","hashOfConfig":"37"},{"size":486,"mtime":1666189822199,"results":"47","hashOfConfig":"37"},{"size":826,"mtime":1666189822198,"results":"48","hashOfConfig":"37"},{"size":2308,"mtime":1666189822198,"results":"49","hashOfConfig":"37"},{"size":784,"mtime":1666189822194,"results":"50","hashOfConfig":"37"},{"size":635,"mtime":1666189822196,"results":"51","hashOfConfig":"37"},{"size":771,"mtime":1666189822195,"results":"52","hashOfConfig":"37"},{"size":991,"mtime":1666189822199,"results":"53","hashOfConfig":"37"},{"size":4743,"mtime":1666189822196,"results":"54","hashOfConfig":"37"},{"size":9614,"mtime":1666189822196,"results":"55","hashOfConfig":"37"},{"size":3339,"mtime":1666189822196,"results":"56","hashOfConfig":"37"},{"size":2111,"mtime":1666189822197,"results":"57","hashOfConfig":"37"},{"size":112,"mtime":1666189822194,"results":"58","hashOfConfig":"37"},{"size":74,"mtime":1666189822193,"results":"59","hashOfConfig":"37"},{"size":119,"mtime":1666189822194,"results":"60","hashOfConfig":"37"},{"size":107,"mtime":1666189822193,"results":"61","hashOfConfig":"37"},{"size":598,"mtime":1666189822196,"results":"62","hashOfConfig":"37"},{"size":678,"mtime":1666189822199,"results":"63","hashOfConfig":"37"},{"size":32,"mtime":1666189822194,"results":"64","hashOfConfig":"37"},{"size":2439,"mtime":1666189822193,"results":"65","hashOfConfig":"37"},{"size":193,"mtime":1666189822193,"results":"66","hashOfConfig":"37"},{"size":199,"mtime":1666189822193,"results":"67","hashOfConfig":"37"},{"size":108,"mtime":1666189822194,"results":"68","hashOfConfig":"37"},{"size":125,"mtime":1666189822194,"results":"69","hashOfConfig":"37"},{"size":114,"mtime":1666189822194,"results":"70","hashOfConfig":"37"},{"size":2143,"mtime":1666189822194,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"sd8rki",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/index.tsx",[],["151","152"],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/serviceWorker.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/App.tsx",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/side-menu/side-menu.tsx",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/main-menu/main-menu.tsx",["153","154","155"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\n\nexport class MainMenu extends React.PureComponent<any, any> {\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n                <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\">\n                    <img src=\"/assets/img/rpslogo.png\" className=\"logo\" />\n                </a>\n                <nav className=\"my-2 my-md-0 mr-md-3\">\n                    <Link className=\"p-2 text-light\" to=\"/dashboard\">Dashboard</Link>\n                    <Link className=\"p-2 text-light\" to=\"/backlog\">Backlog</Link>\n                </nav>\n            </div>\n        );\n    }\n};\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/pages/backlog/backlog-page.tsx",["156","157","158"],"import React from \"react\";\nimport { BacklogService } from \"../../services/backlog.service\";\nimport { BacklogRepository } from \"../../repositories/backlog.repository\";\nimport { Store } from \"../../../../core/state/app-store\";\nimport { PresetType } from \"../../../../core/models/domain/types\";\nimport { PtItem } from \"../../../../core/models/domain\";\nimport { ItemType } from \"../../../../core/constants\";\n\nimport './backlog-page.css';\n\nimport { AppPresetFilter } from \"../../../../shared/components/preset-filter/preset-filter\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport { PtNewItem } from \"../../../../shared/models/dto/pt-new-item\";\nimport { EMPTY_STRING } from \"../../../../core/helpers\";\nimport { getIndicatorClass } from \"../../../../shared/helpers/priority-styling\";\n\n\ninterface BacklogPageState {\n    currentPreset: PresetType;\n    items: PtItem[];\n    showAddModal: boolean;\n    newItem: PtNewItem;\n}\n\nexport class BacklogPage extends React.Component<any, BacklogPageState> {\n\n    private store: Store = new Store();\n    private backlogRepo: BacklogRepository = new BacklogRepository();\n    private backlogService: BacklogService = new BacklogService(this.backlogRepo, this.store);\n\n    public items: PtItem[] = [];\n    public itemTypesProvider = ItemType.List.map((t) => t.PtItemType);\n\n    constructor(props: any) {\n        super(props);\n        const { preset } = this.props.match.params;\n        this.state = {\n            currentPreset: preset ? preset : 'open',\n            items: [],\n            showAddModal: false,\n            newItem: this.initModalNewItem()\n        };\n    }\n\n    public componentDidMount() {\n        this.refresh();\n    }\n\n    public componentDidUpdate(prevsProps: any, prevState: BacklogPageState) {\n        if (this.state.currentPreset !== prevState.currentPreset) {\n            this.refresh();\n        }\n    }\n\n    public getIndicatorImage(item: PtItem) {\n        return ItemType.imageResFromType(item.type);\n    }\n\n    public getPriorityClass(item: PtItem): string {\n        const indicatorClass = getIndicatorClass(item.priority);\n        return indicatorClass;\n    }\n\n    private onSelectPresetTap(preset: PresetType) {\n        this.setState({\n            currentPreset: preset\n        });\n        this.props.history.push(`/backlog/${[preset]}`);\n    }\n\n    private refresh() {\n        this.backlogService.getItems(this.state.currentPreset)\n            .then(ptItems => {\n                this.setState({\n                    items: ptItems\n                });\n            });\n    }\n\n    public listItemTap(item: PtItem) {\n        // navigate to detail page\n        this.props.history.push(`/detail/${item.id}`);\n    }\n\n\n    private toggleModal() {\n        this.setState({\n            showAddModal: !this.state.showAddModal\n        });\n    }\n\n    public onFieldChange(e: any, formFieldName: string) {\n        if (!this.state.newItem) {\n            return;\n        }\n\n        this.setState({\n            newItem: { ...this.state.newItem, [formFieldName]: e.target.value }\n        });\n    }\n\n    public onAddSave() {\n        if (this.store.value.currentUser) {\n            this.backlogService.addNewPtItem(this.state.newItem, this.store.value.currentUser)\n                .then((nextItem: PtItem) => {\n                    this.setState({\n                        showAddModal: false,\n                        newItem: this.initModalNewItem(),\n                        items: [nextItem, ...this.state.items]\n                    });\n                });\n        }\n    }\n\n    private initModalNewItem(): PtNewItem {\n        return {\n            title: EMPTY_STRING,\n            description: EMPTY_STRING,\n            typeStr: 'PBI'\n        };\n    }\n\n    public render() {\n\n        const rows = this.state.items.map(i => {\n            return (\n                <tr key={i.id} className=\"pt-table-row\" onClick={(e) => this.listItemTap(i)}>\n                    <td>\n                        <img src={this.getIndicatorImage(i)} className=\"backlog-icon\" />\n                    </td>\n                    <td>\n                        <img src={i.assignee.avatar} className=\"li-avatar rounded mx-auto d-block\" />\n                    </td>\n                    <td>\n                        <span className=\"li-title\">{i.title}</span>\n                    </td>\n\n                    <td>\n                        <span>{i.status}</span>\n                    </td>\n\n                    <td>\n                        <span className={'badge ' + this.getPriorityClass(i)}>{i.priority}\n                        </span>\n                    </td>\n                    <td><span className=\"li-estimate\">{i.estimate}</span></td>\n                    <td><span className=\"li-date\">{i.dateCreated.toDateString()}</span></td>\n                </tr>\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\n                    <h1 className=\"h2\">Backlog</h1>\n                    <div className=\"btn-toolbar mb-2 mb-md-0\">\n                        <AppPresetFilter selectedPreset={this.state.currentPreset} onSelectPresetTap={(p) => this.onSelectPresetTap(p)} />\n\n                        <div className=\"btn-group mr-2\">\n                            <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.toggleModal()}>Add</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"table-responsive\">\n                    <table className=\"table table-striped table-sm table-hover\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>Assignee</th>\n                                <th>Title</th>\n                                <th>Status</th>\n                                <th>Priority</th>\n                                <th>Estimate</th>\n                                <th>Created</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {rows}\n                        </tbody>\n                    </table>\n                </div>\n\n                <Modal isOpen={this.state.showAddModal} toggle={() => this.toggleModal()} className={this.props.className}>\n                    <div className=\"modal-header\">\n                        <h4 className=\"modal-title\" id=\"modal-basic-title\">Add New Item</h4>\n                        <button type=\"button\" className=\"close\" onClick={() => this.toggleModal()} aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <ModalBody>\n                        <form>\n                            <div className=\"form-group row\">\n                                <label className=\"col-sm-2 col-form-label\">Title</label>\n                                <div className=\"col-sm-10\">\n                                    <input className=\"form-control\" defaultValue={this.state.newItem.title} onChange={(e) => this.onFieldChange(e, 'title')} name=\"title\" />\n                                </div>\n                            </div>\n\n                            <div className=\"form-group row\">\n                                <label className=\"col-sm-2 col-form-label\">Description</label>\n                                <div className=\"col-sm-10\">\n                                    <textarea className=\"form-control\" defaultValue={this.state.newItem.description} onChange={(e) => this.onFieldChange(e, 'description')} name=\"description\"></textarea>\n                                </div>\n                            </div>\n\n                            <div className=\"form-group row\">\n                                <label className=\"col-sm-2 col-form-label\">Item Type</label>\n                                <div className=\"col-sm-10\">\n                                    <select className=\"form-control\" defaultValue={this.state.newItem.typeStr} onChange={(e) => this.onFieldChange(e, 'typeStr')} name=\"itemType\">\n                                        {\n                                            this.itemTypesProvider.map(t => {\n                                                return (\n                                                    <option key={t} value={t}>\n                                                        {t}\n                                                    </option>\n                                                )\n                                            })\n                                        }\n                                    </select>\n                                </div>\n                            </div>\n\n                        </form >\n                    </ModalBody >\n                    <ModalFooter>\n                        <Button color=\"secondary\" onClick={() => this.toggleModal()}>Cancel</Button>\n                        <Button color=\"primary\" onClick={() => this.onAddSave()}>Save</Button>{' '}\n\n                    </ModalFooter>\n                </Modal >\n\n\n            </React.Fragment >\n\n        );\n    }\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/pages/dashboard/dashboard-page.tsx",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/pages/detail/detail-page.tsx",["159"],"import React from \"react\";\n\nimport { PtItem, PtUser, PtTask, PtComment } from \"../../../../core/models/domain\";\nimport { DetailScreenType } from \"../../../../shared/models/ui/types/detail-screens\";\nimport { Store } from \"../../../../core/state/app-store\";\nimport { BacklogRepository } from \"../../repositories/backlog.repository\";\nimport { BacklogService } from \"../../services/backlog.service\";\nimport { PtItemDetailsComponent } from \"../../components/item-details/pt-item-details\";\nimport { PtItemTasksComponent } from \"../../components/item-tasks/pt-item-tasks\";\n// import { debug } from \"util\";\nimport { PtUserService } from \"../../../../core/services/pt-user-service\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { PtNewTask } from \"../../../../shared/models/dto/pt-new-task\";\nimport { PtTaskUpdate } from \"../../../../shared/models/dto/pt-task-update\";\nimport { PtItemChitchatComponent } from \"../../components/item-chitchat/pt-item-chitchat\";\nimport { PtNewComment } from \"../../../../shared/models/dto/pt-new-comment\";\n\ninterface DetailPageState {\n    item: PtItem | undefined;\n    selectedDetailsScreen: DetailScreenType;\n}\n\nexport class DetailPage extends React.Component<any, DetailPageState> {\n\n    private store: Store = new Store();\n    private backlogRepo: BacklogRepository = new BacklogRepository();\n    private backlogService: BacklogService = new BacklogService(this.backlogRepo, this.store);\n    private ptUserService: PtUserService = new PtUserService(this.store);\n\n    private itemId = 0;\n    private users$: Observable<PtUser[]> = this.store.select<PtUser[]>('users');\n    public tasks$: BehaviorSubject<PtTask[]> = new BehaviorSubject<PtTask[]>([]);\n    public comments$: BehaviorSubject<PtComment[]> = new BehaviorSubject<PtComment[]>([]);\n    public currentUser: PtUser | undefined;\n\n    private screenPositionMap: { [key in DetailScreenType | number]: number | DetailScreenType } = {\n        0: 'details',\n        1: 'tasks',\n        2: 'chitchat',\n        'details': 0,\n        'tasks': 1,\n        'chitchat': 2\n    };\n\n    constructor(props: any) {\n        super(props);\n\n        const { id, screen } = this.props.match.params;\n        this.itemId = id;\n        this.currentUser = this.store.value.currentUser;\n\n        this.state = {\n            item: undefined,\n            selectedDetailsScreen: screen ? screen : 'details'\n        };\n    }\n\n    public componentDidMount() {\n        this.refresh();\n    }\n\n    public componentDidUpdate(prevsProps: any, prevState: DetailPageState) {\n\n    }\n\n    private refresh() {\n        this.backlogService.getPtItem(this.itemId)\n            .then(item => {\n                this.setState({\n                    item: item\n                });\n                this.tasks$.next(item.tasks);\n                this.comments$.next(item.comments);\n            });\n    }\n\n    public onScreenSelected(screen: DetailScreenType) {\n        this.setState({\n            selectedDetailsScreen: screen\n        });\n        this.props.history.push(`/detail/${this.itemId}/${screen}`);\n    }\n\n    public onItemSaved(item: PtItem) {\n        this.backlogService.updatePtItem(item)\n            .then((updateItem: PtItem) => {\n                this.setState({\n                    item: updateItem\n                });\n            });\n    }\n\n    public onAddNewTask(newTask: PtNewTask) {\n        if (this.state.item) {\n            this.backlogService.addNewPtTask(newTask, this.state.item).then(nextTask => {\n                this.tasks$.next([nextTask].concat(this.tasks$.value));\n            });\n        }\n    }\n\n    public onUpdateTask(taskUpdate: PtTaskUpdate) {\n        if (this.state.item) {\n            if (taskUpdate.delete) {\n                this.backlogService.deletePtTask(this.state.item, taskUpdate.task).then(ok => {\n                    if (ok) {\n                        const newTasks = this.tasks$.value.filter(task => {\n                            if (task.id !== taskUpdate.task.id) {\n                                return task;\n                            }\n                        });\n                        this.tasks$.next(newTasks);\n                    }\n                });\n            } else {\n                this.backlogService.updatePtTask(this.state.item, taskUpdate.task, taskUpdate.toggle, taskUpdate.newTitle).then(updatedTask => {\n                    const newTasks = this.tasks$.value.map(task => {\n                        if (task.id === updatedTask.id) {\n                            return updatedTask;\n                        } else {\n                            return task;\n                        }\n                    });\n                    this.tasks$.next(newTasks);\n                });\n            }\n        }\n    }\n\n\n    public onAddNewComment(newComment: PtNewComment) {\n        if (this.state.item) {\n            this.backlogService.addNewPtComment(newComment, this.state.item).then(nextComment => {\n                this.comments$.next([nextComment].concat(this.comments$.value));\n            });\n        }\n    }\n\n    public onUsersRequested() {\n        this.ptUserService.fetchUsers();\n    }\n\n    private screenRender(screen: DetailScreenType, item: PtItem) {\n        switch (screen) {\n            case 'details':\n                return <PtItemDetailsComponent item={item} users$={this.users$} usersRequested={() => this.onUsersRequested()} itemSaved={(item) => this.onItemSaved(item)} />;\n            case 'tasks':\n                return <PtItemTasksComponent tasks$={this.tasks$} addNewTask={(newTask) => this.onAddNewTask(newTask)} updateTask={(taskUpdate) => this.onUpdateTask(taskUpdate)} />;\n            case 'chitchat':\n                return <PtItemChitchatComponent comments$={this.comments$} currentUser={this.currentUser!} addNewComment={(newComment) => this.onAddNewComment(newComment)} />;\n\n            default:\n                return <PtItemDetailsComponent item={item} users$={this.users$} usersRequested={() => this.onUsersRequested()} itemSaved={(item) => this.onItemSaved(item)} />;\n        }\n    }\n\n\n\n    public render() {\n        const item = this.state.item;\n\n        if (!item) {\n            return null;\n        }\n        return (\n\n            <div>\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\n                    <h1 className=\"h2\">{item.title}</h1>\n                    <div className=\"btn-toolbar mb-2 mb-md-0\">\n                        <div className=\"btn-group mr-2\">\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('details')} className={'btn btn-sm btn-outline-secondary ' + this.state.selectedDetailsScreen === 'details' ? 'active' : ''}>Details</button>\n\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('tasks')} className={\"btn btn-sm btn-outline-secondary \" + this.state.selectedDetailsScreen === 'tasks' ? 'active' : ''}>Tasks</button>\n\n                            <button type=\"button\" onClick={(e) => this.onScreenSelected('chitchat')} className={\"btn btn-sm btn-outline-secondary \" + this.state.selectedDetailsScreen === 'chitchat' ? 'active' : ''}>Chitchat</button>\n                        </div>\n                    </div>\n                </div>\n\n                {this.screenRender(this.state.selectedDetailsScreen, item)}\n\n            </div>\n        );\n    }\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/repositories/backlog.repository.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/services/backlog.service.ts",["160","161","162","163"],"import { Store } from '../../../core/state/app-store';\nimport { BacklogRepository } from '../repositories/backlog.repository';\n\nimport { PtItem, PtUser, PtTask, PtComment } from '../../../core/models/domain';\n\nimport { PriorityEnum, StatusEnum } from '../../../core/models/domain/enums';\nimport { getUserAvatarUrl } from '../../../core/helpers/user-avatar-helper';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { CONFIG } from '../../../config';\nimport { PresetType } from '../../../core/models/domain/types';\nimport { datesForTask, datesForPtItem } from '../../../core/helpers/date-utils';\nimport { PtNewItem } from '../../../shared/models/dto/pt-new-item';\nimport { PtNewTask } from '../../../shared/models/dto/pt-new-task';\nimport { PtNewComment } from '../../../shared/models/dto/pt-new-comment';\n\n\nexport const tempCurrentUser = {\n    avatar: getUserAvatarUrl(CONFIG.apiEndpoint, 21),\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    fullName: 'Alex Ziskind',\n    id: 21\n};\n\n\nexport class BacklogService {\n\n\n    private get currentPreset() {\n        return this.store.value.selectedPreset;\n    }\n\n    private get currentUserId() {\n        if (this.store.value.currentUser) {\n            return this.store.value.currentUser.id;\n        } else {\n            return undefined;\n        }\n    }\n\n\n    constructor(\n        private repo: BacklogRepository,\n        private store: Store\n    ) {\n        this.store.value.currentUser = tempCurrentUser;\n    }\n\n    public getItems(preset: PresetType): Promise<PtItem[]> {\n        return this.repo.getPtItems(preset, this.currentUserId)\n            .then((ptItems: PtItem[]) => {\n\n                ptItems.forEach(i => {\n                    datesForPtItem(i);\n                    this.setUserAvatarUrl(i.assignee);\n                    i.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                });\n                return ptItems;\n            });\n    }\n\n    /*\n    public getItemFromCacheOrServer(id: number) {\n        // const selectedItem = _.find(this.store.value.backlogItems, i => i.id === id);\n        const selectedItem = this.store.value.backlogItems.find(i => i.id === id);\n        if (selectedItem) {\n\n            this.store.set('currentSelectedItem', selectedItem);\n\n        } else {\n            this.getPtItem(id);\n        }\n    }\n*/\n\n\n    public getPtItem(id: number): Promise<PtItem> {\n        return this.repo.getPtItem(id)\n            .then((ptItem: PtItem) => {\n                datesForPtItem(ptItem);\n                this.setUserAvatarUrl(ptItem.assignee);\n                ptItem.comments.forEach(c => this.setUserAvatarUrl(c.user));\n                ptItem.tasks.forEach(t => datesForTask(t));\n                return ptItem;\n            });\n    }\n\n\n    public addNewPtItem(newItem: PtNewItem, assignee: PtUser): Promise<PtItem> {\n        const item: PtItem = {\n            id: 0,\n            title: newItem.title,\n            description: newItem.description,\n            type: newItem.typeStr,\n            estimate: 0,\n            priority: PriorityEnum.Medium,\n            status: StatusEnum.Open,\n            assignee: assignee,\n            tasks: [],\n            comments: [],\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n        return new Promise<PtItem>((resolve, reject) => {\n            this.repo.insertPtItem(item)\n                .then((nextItem: PtItem) => {\n                    datesForPtItem(nextItem);\n                    this.setUserAvatar(nextItem.assignee);\n\n                    nextItem.tasks.forEach(t => datesForTask(t));\n                    resolve(nextItem);\n                });\n        });\n    }\n\n\n    public updatePtItem(item: PtItem): Promise<PtItem> {\n        return this.repo.updatePtItem(item);\n    }\n\n    /*\n\n    public deletePtItem(item: PtItem) {\n        this.repo.deletePtItem(item.id,\n            () => {\n\n                const updatedItems = this.store.value.backlogItems.filter((i) => {\n                    return i.id !== item.id;\n                });\n                this.store.set('backlogItems', updatedItems);\n\n            }\n        );\n    }\n*/\n\n    public addNewPtTask(newTask: PtNewTask, currentItem: PtItem): Promise<PtTask> {\n        const task: PtTask = {\n            id: 0,\n            title: newTask.title,\n            completed: false,\n            dateCreated: new Date(),\n            dateModified: new Date(),\n            dateStart: newTask.dateStart ? newTask.dateStart : undefined,\n            dateEnd: newTask.dateEnd ? newTask.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.insertPtTask(\n                task,\n                currentItem.id)\n                .then((nextTask: PtTask) => {\n                    datesForTask(nextTask);\n                    resolve(nextTask);\n                }\n                );\n        });\n    }\n\n\n    public updatePtTask(currentItem: PtItem, task: PtTask, toggle: boolean, newTitle?: string): Promise<PtTask> {\n        const taskToUpdate: PtTask = {\n            id: task.id,\n            title: newTitle ? newTitle : task.title,\n            completed: toggle ? !task.completed : task.completed,\n            dateCreated: task.dateCreated,\n            dateModified: new Date(),\n            dateStart: task.dateStart ? task.dateStart : undefined,\n            dateEnd: task.dateEnd ? task.dateEnd : undefined\n        };\n        return new Promise<PtTask>((resolve, reject) => {\n            this.repo.updatePtTask(\n                taskToUpdate,\n                currentItem.id)\n                .then((updatedTask: PtTask) => {\n                    datesForTask(updatedTask);\n                    resolve(updatedTask);\n                }\n                );\n        });\n    }\n\n    public deletePtTask(currentItem: PtItem, task: PtTask): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.repo.deletePtTask(task, currentItem.id)\n                .then((ok: boolean) => {\n                    const updatedTasks = currentItem.tasks.filter(t => {\n                        if (t.id !== task.id) {\n                            return t;\n                        }\n                    });\n                    currentItem.tasks = updatedTasks;\n                    resolve(ok);\n                }\n                );\n        });\n    }\n\n    public addNewPtComment(newComment: PtNewComment, currentItem: PtItem): Promise<PtComment> {\n        const comment: PtComment = {\n            id: 0,\n            title: newComment.title,\n            user: this.store.value.currentUser,\n            dateCreated: new Date(),\n            dateModified: new Date()\n        };\n        return new Promise<PtComment>((resolve, reject) => {\n            this.repo.insertPtComment(\n                comment,\n                currentItem.id\n            )\n                .then((nextComment: PtComment) => {\n                    resolve(nextComment);\n                }\n                );\n        });\n    }\n\n    private setUserAvatarUrl(user: PtUser | undefined) {\n        if (user) {\n            user.avatar = `${CONFIG.apiEndpoint}/photo/${user.id}`;\n        }\n    }\n\n    private setUserAvatar(user: PtUser) {\n        user.avatar = getUserAvatarUrl(CONFIG.apiEndpoint, user.id);\n    }\n\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/helpers/priority-styling.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/services/dashboard.service.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/repositories/dashboard.repository.ts",["164"],"import { StatusCounts, PriorityCounts, TypeCounts } from '../models';\nimport { CONFIG } from '../../../config';\nimport { PtItem } from '../../../core/models/domain';\n\n\nexport interface DashboardFilter {\n    userId?: number;\n    dateStart?: Date;\n    dateEnd?: Date;\n}\n\nexport interface ItemsForMonth {\n    closed: PtItem[];\n    open: PtItem[];\n}\n\nexport interface FilteredIssues {\n    categories: Date[];\n    items: ItemsForMonth[];\n}\n\nexport class DashboardRepository {\n    constructor() { }\n\n    private getFilterParamString(filter: DashboardFilter): string {\n        const params = [\n            filter.userId ? `userId=${filter.userId}` : '',\n            filter.dateStart ? `dateStart=${filter.dateStart.toDateString()}` : '',\n            filter.dateEnd ? `dateEnd=${filter.dateEnd.toDateString()}` : ''\n        ];\n        const paramStr = params.join('&');\n        return paramStr;\n    }\n    private getStatusCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/statuscounts?${paramStr}`;\n    }\n\n    private getPriorityCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getTypeCountsUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/prioritycounts?${paramStr}`;\n    }\n\n    private getFilteredIssuesUrl(paramStr: string): string {\n        return `${CONFIG.apiEndpoint}/stats/filteredissues?${paramStr}`;\n    }\n\n    public getStatusCounts(filter: DashboardFilter): Promise<StatusCounts> {\n        return fetch(this.getStatusCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getPriorityCounts(filter: DashboardFilter): Promise<PriorityCounts> {\n        return fetch(this.getPriorityCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getTypeCounts(filter: DashboardFilter): Promise<TypeCounts> {\n        return fetch(this.getTypeCountsUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n\n    public getFilteredIssues(filter: DashboardFilter): Promise<FilteredIssues> {\n        return fetch(this.getFilteredIssuesUrl(this.getFilterParamString(filter)))\n            .then(response => response.json());\n    }\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/date-utils.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/state/app-store.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/services/pt-user-service.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/components/preset-filter/preset-filter.tsx",["165","166"],"import React, { ReactNode } from \"react\";\nimport { PresetType } from \"../../../core/models/domain/types\";\n\n\ninterface AppPresetFilterProps {\n    selectedPreset: PresetType;\n    onSelectPresetTap: (preset: PresetType) => void;\n}\n\nexport class AppPresetFilter extends React.PureComponent<AppPresetFilterProps, any> {\n\n    constructor(props: AppPresetFilterProps) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"btn-group mr-2\">\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('my')}>My Items</button>\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('open')} > Open Items</button >\n                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={(e) => this.props.onSelectPresetTap('closed')} > Done Items</button >\n            </div >\n        );\n    }\n};\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-tasks/pt-item-tasks.tsx",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-details/pt-item-details.tsx",["167","168","169"],"import React from \"react\";\nimport { PtItem, PtUser } from \"../../../../core/models/domain\";\nimport { PtItemDetailsEditFormModel, ptItemToFormModel } from \"../../../../shared/models/forms/pt-item-details-edit-form\";\nimport { ItemType, PT_ITEM_STATUSES, PT_ITEM_PRIORITIES } from \"../../../../core/constants\";\nimport { Modal, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport { Observable } from \"rxjs\";\n\ninterface PtItemDetailsComponentProps {\n    item: PtItem;\n    itemSaved: (item: PtItem) => void;\n    usersRequested: () => void;\n    users$: Observable<PtUser[]>;\n}\n\ninterface PtItemDetailsComponentState {\n    showAddModal: boolean;\n    users: PtUser[];\n}\n\nexport class PtItemDetailsComponent extends React.Component<PtItemDetailsComponentProps, PtItemDetailsComponentState> {\n\n    private itemForm: PtItemDetailsEditFormModel | undefined;\n    public itemTypesProvider = ItemType.List.map((t) => t.PtItemType);\n    public statusesProvider = PT_ITEM_STATUSES;\n    public prioritiesProvider = PT_ITEM_PRIORITIES;\n    private selectedAssignee: PtUser | undefined;\n\n    constructor(props: any) {\n        super(props);\n\n        this.itemForm = ptItemToFormModel(this.props.item);\n        this.state = {\n            showAddModal: false,\n            users: []\n        };\n        this.selectedAssignee = this.props.item.assignee;\n    }\n\n    public onFieldChange(e: any, formFieldName: string) {\n        if (!this.itemForm) {\n            return;\n        }\n        (this.itemForm as any)[formFieldName] = e.target.value;\n    }\n\n    public onNonTextFieldChange(e: any, formFieldName: string) {\n        this.onFieldChange(e, formFieldName);\n        this.notifyUpdateItem();\n    }\n\n    public onBlurTextField() {\n        this.notifyUpdateItem();\n    }\n\n    private notifyUpdateItem() {\n        if (!this.itemForm) {\n            return;\n        }\n        const updatedItem = this.getUpdatedItem(this.props.item, this.itemForm, this.selectedAssignee!);\n        this.props.itemSaved(updatedItem);\n    }\n\n    private getUpdatedItem(item: PtItem, itemForm: PtItemDetailsEditFormModel, assignee: PtUser): PtItem {\n        const updatedItem = Object.assign({}, item, {\n            title: itemForm.title,\n            description: itemForm.description,\n            type: itemForm.typeStr,\n            status: itemForm.statusStr,\n            priority: itemForm.priorityStr,\n            estimate: itemForm.estimate,\n            assignee: assignee\n        });\n        return updatedItem;\n    }\n\n    public assigneePickerOpen() {\n        this.props.users$.subscribe((users: PtUser[]) => {\n            if (users.length > 0) {\n                this.setState({\n                    users: users,\n                    showAddModal: true\n                });\n            }\n        });\n\n        this.props.usersRequested();\n    }\n\n    private toggleModal() {\n        this.setState({\n            showAddModal: !this.state.showAddModal\n        });\n        return false;\n    }\n\n    private selectAssignee(u: PtUser) {\n        this.selectedAssignee = u;\n        this.itemForm!.assigneeName = u.fullName;\n        this.setState({\n            showAddModal: false,\n        });\n        this.notifyUpdateItem();\n    }\n\n    public render() {\n        if (!this.itemForm) {\n            return null;\n        }\n        const itemForm = this.itemForm;\n        return (\n            <React.Fragment>\n                <form>\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Title</label>\n                        <div className=\"col-sm-10\">\n                            <input className=\"form-control\" defaultValue={itemForm.title} onBlur={() => this.onBlurTextField()} onChange={(e) => this.onFieldChange(e, 'title')} name=\"title\" />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Description</label>\n                        <div className=\"col-sm-10\">\n                            <textarea className=\"form-control\" defaultValue={itemForm.description} onBlur={() => this.onBlurTextField()} onChange={(e) => this.onFieldChange(e, 'description')} name=\"description\"></textarea>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Item Type</label>\n                        <div className=\"col-sm-10\">\n                            <select className=\"form-control\" defaultValue={itemForm.typeStr} onChange={(e) => this.onNonTextFieldChange(e, 'typeStr')} name=\"itemType\">\n                                {\n                                    this.itemTypesProvider.map(t => {\n                                        return (\n                                            <option key={t} value={t}>\n                                                {t}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Status</label>\n                        <div className=\"col-sm-10\">\n                            <select className=\"form-control\" defaultValue={itemForm.statusStr} onChange={(e) => this.onNonTextFieldChange(e, 'statusStr')} name=\"status\">\n                                {\n                                    this.statusesProvider.map(t => {\n                                        return (\n                                            <option key={t} value={t}>\n                                                {t}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Estimate</label>\n                        <div className=\"col-sm-10\">\n                            <input className=\"form-control\" type=\"range\" step=\"1\" min=\"0\" max=\"20\" value={itemForm.estimate} onChange={(e) => this.onNonTextFieldChange(e, 'estimate')} name=\"estimate\" style={{ width: 300 }} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Priority</label>\n                        <div className=\"col-sm-10\">\n                            <select className=\"form-control\" defaultValue={itemForm.priorityStr} onChange={(e) => this.onNonTextFieldChange(e, 'priorityStr')} name=\"priority\">\n                                {\n                                    this.prioritiesProvider.map(t => {\n                                        return (\n                                            <option key={t} value={t}>\n                                                {t}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-2 col-form-label\">Assignee</label>\n\n                        <div className=\"col-sm-10\">\n                            <img src={this.selectedAssignee!.avatar} className=\"li-avatar rounded\" />\n                            <span>{itemForm.assigneeName}</span>\n\n                            <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.assigneePickerOpen()}>Pick assignee</button>\n                        </div>\n                    </div>\n                </form>\n\n                <Modal isOpen={this.state.showAddModal} toggle={() => this.toggleModal()}>\n                    <div className=\"modal-header\">\n                        <h4 className=\"modal-title\" id=\"modal-basic-title\">Select Assignee</h4>\n                        <button type=\"button\" className=\"close\" onClick={() => this.toggleModal()} aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <ModalBody>\n                        <ul className=\"list-group list-group-flush\">\n                            {\n                                this.state.users.map((u: PtUser) => {\n                                    return (\n                                        <li key={u.id} className=\"list-group-item d-flex justify-content-between align-items-center\" onClick={() => this.selectAssignee(u)}>\n                                            <span>{u.fullName}</span>\n                                            <span className=\"badge \">\n                                                <img src={u.avatar} className=\"li-avatar rounded mx-auto d-block\" />\n                                            </span>\n                                        </li>\n                                    );\n                                })\n                            }\n                        </ul>\n                    </ModalBody >\n                    <ModalFooter />\n                </Modal >\n\n            </React.Fragment>\n        );\n    }\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/backlog/components/item-chitchat/pt-item-chitchat.tsx",["170","171"],"import React from \"react\";\nimport { PtComment, PtUser } from \"../../../../core/models/domain\";\nimport { EMPTY_STRING } from \"../../../../core/helpers\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { PtNewComment } from \"../../../../shared/models/dto/pt-new-comment\";\n\nimport './pt-item-chitchat.css';\n\ninterface PtItemChitchatComponentProps {\n    comments$: BehaviorSubject<PtComment[]>;\n    currentUser: PtUser;\n    addNewComment: (newComment: PtNewComment) => void;\n}\n\ninterface PtItemChitchatComponentState {\n    newCommentText: string;\n    comments: PtComment[];\n}\n\nexport class PtItemChitchatComponent extends React.Component<PtItemChitchatComponentProps, PtItemChitchatComponentState> {\n\n    constructor(props: PtItemChitchatComponentProps) {\n        super(props);\n        this.state = {\n            newCommentText: EMPTY_STRING,\n            comments: []\n        };\n    }\n\n    public componentDidMount() {\n        this.props.comments$.subscribe((comments: PtComment[]) => {\n            this.setState({\n                comments: comments\n            });\n        });\n    }\n\n    public onNewCommentChanged(e: any) {\n        this.setState({\n            newCommentText: e.target.value\n        });\n    }\n\n    public onAddTapped() {\n        const newTitle = this.state.newCommentText.trim();\n        if (newTitle.length === 0) {\n            return;\n        }\n        const newComment: PtNewComment = {\n            title: newTitle\n        };\n        this.props.addNewComment(newComment);\n\n        this.setState({\n            newCommentText: EMPTY_STRING\n        });\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <form>\n                    <div className=\"form-row align-items-center\">\n\n                        <img src={this.props.currentUser.avatar} className=\"mr-3 li-avatar rounded\" />\n\n                        <div className=\"col-sm-6\">\n                            <textarea defaultValue={this.state.newCommentText} onChange={(e) => this.onNewCommentChanged(e)} placeholder=\"Enter new comment...\" className=\"form-control pt-text-comment-add\"\n                                name=\"newComment\"></textarea>\n                        </div>\n                        <button type=\"button\" onClick={() => this.onAddTapped()} className=\"btn btn-primary\" disabled={!this.state.newCommentText}>Add</button>\n                    </div>\n                </form >\n\n                <hr />\n\n                <ul className=\"list-unstyled\">\n                    {\n                        this.state.comments.map(comment => {\n                            return (\n                                <li key={comment.id} className=\"media chitchat-item\">\n                                    <img src={comment.user!.avatar} className=\"mr-3 li-avatar rounded\" />\n                                    <div className=\"media-body\">\n                                        <h6 className=\"mt-0 mb-1\"><span>{comment.user!.fullName}</span><span className=\"li-date\">{comment.dateCreated}</span></h6>\n\n                                        <span className=\"chitchat-text \">{comment.title}</span>\n\n                                    </div>\n                                </li>\n                            );\n                        })\n                    }\n                </ul>\n            </React.Fragment >\n        );\n    }\n}\n","/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/modules/dashboard/components/active-issues/active-issues.tsx",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/index.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/config.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/user-avatar-helper.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/index.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/state/app-state.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/shared/models/forms/pt-item-details-edit-form.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/helpers/string-helpers.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-types.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-statuses.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/constants/pt-item-priorities.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/index.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-status.enum.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-type-enum.ts",[],"/Users/alex/Code/courses/alexziskind1/rpstrackerreact/src/core/models/domain/enums/item-priority.enum.ts",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":8,"column":5,"nodeType":"178","messageId":"179","endLine":10,"endColumn":6},{"ruleId":"180","severity":1,"message":"181","line":15,"column":17,"nodeType":"182","endLine":15,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":16,"column":21,"nodeType":"182","endLine":16,"endColumn":75},{"ruleId":"185","severity":1,"message":"186","line":12,"column":17,"nodeType":"187","messageId":"188","endLine":12,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":129,"column":25,"nodeType":"182","endLine":129,"endColumn":89},{"ruleId":"183","severity":1,"message":"184","line":132,"column":25,"nodeType":"182","endLine":132,"endColumn":102},{"ruleId":"189","severity":1,"message":"190","line":106,"column":72,"nodeType":"191","messageId":"192","endLine":106,"endColumn":74},{"ruleId":"185","severity":1,"message":"193","line":8,"column":10,"nodeType":"187","messageId":"188","endLine":8,"endColumn":20},{"ruleId":"185","severity":1,"message":"194","line":9,"column":10,"nodeType":"187","messageId":"188","endLine":9,"endColumn":13},{"ruleId":"185","severity":1,"message":"195","line":9,"column":15,"nodeType":"187","messageId":"188","endLine":9,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":188,"column":69,"nodeType":"191","messageId":"192","endLine":188,"endColumn":71},{"ruleId":"176","severity":1,"message":"177","line":23,"column":5,"nodeType":"178","messageId":"179","endLine":23,"endColumn":22},{"ruleId":"185","severity":1,"message":"196","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"177","line":12,"column":5,"nodeType":"178","messageId":"179","endLine":14,"endColumn":6},{"ruleId":"185","severity":1,"message":"197","line":5,"column":41,"nodeType":"187","messageId":"188","endLine":5,"endColumn":47},{"ruleId":"183","severity":1,"message":"184","line":189,"column":29,"nodeType":"182","endLine":189,"endColumn":102},{"ruleId":"183","severity":1,"message":"184","line":212,"column":49,"nodeType":"182","endLine":212,"endColumn":117},{"ruleId":"183","severity":1,"message":"184","line":65,"column":25,"nodeType":"182","endLine":65,"endColumn":103},{"ruleId":"183","severity":1,"message":"184","line":82,"column":37,"nodeType":"182","endLine":82,"endColumn":106},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@typescript-eslint/no-unused-vars","'ModalHeader' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Observable' is defined but never used.","'map' is defined but never used.","'tap' is defined but never used.","'ReactNode' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]